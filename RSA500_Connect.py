'''
Date Created: Dec 27, 2017

@author: Jacob Buckley
RSA API 3.9.0029 -- https://www.tek.com/model/rsa306-software
Python 3.6 64-bit (Anaconda 5.0.1) -- https://www.anaconda.com/download/?lang=en-us
MatPlotLib 2.1.1,Numpy 1.13.3 both included in Anaconda




Based on Morgan Allison RSA306 API with Python codes created 5/5/15
Source: https://forum.tek.com/viewtopic.php?t=138250

also based on https://forum.tek.com/viewtopic.php?t=138705
'''

from ctypes import *
import os
import numpy as np
import matplotlib.pyplot as plt
import scipy
from tempfile import TemporaryFile



#Sets directory to RSA API
os.chdir(r"C:\Tektronix\RSA_API\lib\x64")
r = os.getcwd()
#Makes sure directory is correct
print ("Current directory is %s" % r)

#Applies RSA API dll and methods
rsa = WinDLL("C:/Tektronix/RSA_API/lib/x64/RSA_API.dll")
rsa500 = WinDLL("C:/Tektronix/RSA_API/lib/x64/RSA500API.dll")


''' #######################Classes################################'''
def search_connect():
    #Search and Connect Variables
    numFound = c_int(0)
    intArray = c_int*10
    deviceIDs = intArray()
    deviceSerial = create_string_buffer(8)
    deviceType = create_string_buffer(8)
    apiVersion = create_string_buffer(16)


    #Get API version
    rsa.DEVICE_GetAPIVersion(apiVersion)
    print('API Version {}'.format(apiVersion.value.decode()))

    #Searching for Device
    ret = rsa.DEVICE_Search(byref(numFound), deviceIDs, deviceSerial, deviceType)
    if ret != 0:
            print('Error in Search: ' +str(ret))
            exit()
    if numFound.value < 1:
            print('No RSA Devices found')
            exit()
    elif numFound.value == 1:
            print('One device found.')
            print('Device type: {}'.format(deviceType.value.decode()))
            print('Device Serial Number: {}'.format(deviceSerial.value.decode()))
            ret = rsa.DEVICE_Connect(deviceIDs[0])
            print('Device Connected')
            return
            if ret != 0:
                    print('Error in connecting: ' + str(ret))

    else:
            print('2 or more instruments found.')
            exit()



def main():
        "################# VARIABLES ####################"
        #SA parameters
        refLevel = c_double(0)
        cf = c_double(312.181e6)
        iqBandwidth = c_double(200e3)
        acqTime = 10e-3
        recordLength = c_int(int(iqBandwidth.value*1.4*acqTime)) #Number of samples to be generated by each IQ block

        actLength = c_int(0)
        trigMode = c_int(1)
        trigLevel = c_double(-35.7)
        trigSource = c_int(1)
        iqSampleRate = c_double(0)
        runMode = c_bool(False)
        timeoutMsec = c_int(1000)
        ready = c_bool(False)

        #Data Transfer Variables
        iqArray = c_float*recordLength.value
        iData = iqArray()
        qData = iqArray()



        """################ SEARCHING ####################"""
        search_connect()


        """################### RSA DEVICE CONFIGURATION ####################"""
        rsa.CONFIG_Preset()
        rsa.CONFIG_SetReferenceLevel(refLevel)
        rsa.CONFIG_SetCenterFreq(cf)
        rsa.IQBLK_SetIQBandwidth(iqBandwidth)
        rsa.IQBLK_SetIQRecordLength(recordLength)
        rsa.TRIG_SetTriggerMode(trigMode)
        rsa.TRIG_SetIFPowerTriggerLevel(trigLevel)
        rsa.TRIG_SetTriggerSource(trigSource)
        rsa.TRIG_SetTriggerPositionPercent(c_double(10))


        """#################### ACUIRE DATA AND PROCESS ##########################"""
        rsa.DEVICE_Run()
        # Get relevant setting values
        # RSA device has to be running for this to work
        rsa.CONFIG_GetCenterFreq(byref(cf))
        rsa.CONFIG_GetReferenceLevel(byref(refLevel))
        rsa.IQBLK_GetIQBandwidth(byref(iqBandwidth))
        rsa.IQBLK_GetIQRecordLength(byref(recordLength))
        rsa.TRIG_GetTriggerMode(byref(trigMode))
        rsa.TRIG_GetIFPowerTriggerLevel(byref(trigLevel))
        rsa.TRIG_GetTriggerSource(byref(trigSource))
        rsa.DEVICE_GetEnable(byref(runMode))
        rsa.IQBLK_GetIQSampleRate(byref(iqSampleRate))

        print('Run Mode:' + str(runMode.value))
        print('Reference level: ' + str(refLevel.value) + ' dBm')
        print('Center frequency: ' + str(cf.value/1e6) + ' MHz')
        print('IQ Bandwidth: ' + str(iqBandwidth.value/1e6) + ' MHz')
        print('Record length: ' + str(recordLength.value))
        print('Trigger mode: ' + str(trigMode.value))
        print('Trigger level: ' + str(trigLevel.value) + ' dBm')
        print('Trigger Source: ' + str(trigSource.value))
        print('IQ Sample rate: ' + str(iqSampleRate.value/1e6) + ' MS/sec')

        print('\nAcquring IQ data.')
        if trigMode.value == 1:
                print('Waiting for trigger.')

        rsa.IQBLK_AcquireIQData()
        #Check for data ready
        while ready.value == False:
                ret = rsa.IQBLK_WaitForIQDataReady(timeoutMsec, byref(ready))

        #Query I and Q data
        ret = rsa.IQBLK_GetIQDataDeinterleaved(byref(iData), byref(qData),
                byref(actLength), recordLength)
        print('IQ data obtained')
        rsa.DEVICE_Stop()

        #Convert ctypes array to numpy array
        I = np.ctypeslib.as_array(iData)
        Q = np.ctypeslib.as_array(qData)

        IQ = I + 1j*Q
        #scipy.savemat('C:\Users\Jacob\Documents\University of Portland\Senior\Capstone\tmp\IQ.mat', mdict={'IQ': IQ})

        f = open('I_Data.txt','r+')
        #for i in range(len(I)):
            #f.write("%f" % (IQ[i]))
         #   f.write("%f  %f\n" % (I[i],Q[i]))
        f.write("\n".join(str(el) for el in I))
        f.close()
        f = open('Q_Data.txt','w+')
        f.write("\n".join(str(el) for el in Q))
        f.close()

        #np.savetxt('I_DATA.txt', zip(I), fmt="%f  %f")
        #np.savetxt('Q_DATA.txt',zip(Q),fmt="%f")

        time = np.linspace(0,recordLength.value/iqSampleRate.value,
                recordLength.value)

        """############ PLOTS ################"""
        plt.suptitle('IQ data vs Time', fontsize ='20')
        plt.subplot(211, axisbg='k')
        plt.plot(time*1e3, I, c='red')
        plt.ylabel('I (V) ')
        plt.subplot(212, axisbg='k')
        plt.plot(time*1e3, Q, c='blue')
        plt.xlabel('Time (msec)')
        plt.ylabel('Q')
        plt.show()
        print('Disconnecting')
        ret = rsa.DEVICE_Disconnect()



main()
